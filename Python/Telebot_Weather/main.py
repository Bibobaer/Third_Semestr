import asyncio
import json
import logging
import subprocess
import sys
import time
from pathlib import Path
from random import randint

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, File
from aiogram.utils.markdown import hlink
from vosk import Model, KaldiRecognizer

TOKEN = "Your_Token"

dp = Dispatcher()
bot: Bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

model = None

def text_to_number(text):
    numbers = {
        '–Ω–æ–ª—å': 0,
        '–æ–¥–∏–Ω': 1,
        '–¥–≤–∞': 2,
        '—Ç—Ä–∏': 3,
        '—á–µ—Ç—ã—Ä–µ': 4,
        '–ø—è—Ç—å': 5,
        '—à–µ—Å—Ç—å': 6,
        '—Å–µ–º—å': 7,
        '–≤–æ—Å–µ–º—å': 8,
        '–¥–µ–≤—è—Ç—å': 9,
        '–¥–µ—Å—è—Ç—å': 10,
        '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å': 11,
        '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å': 12,
        '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å': 13,
        '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å': 14,
        '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å': 15,
        '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å': 16,
        '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å': 17,
        '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å': 18,
        '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å': 19,
        '–¥–≤–∞–¥—Ü–∞—Ç—å': 20
    }
    return numbers.get(text)

async def handle_file(file: File, file_name: str, path: str):
    Path(f"{path}").mkdir(parents=True, exist_ok=True)

    await bot.download_file(file_path=file.file_path, destination=f"{path}/{file_name}")

@dp.message(F.voice)
async def Voice_handle(message: Message):
    file_id = message.voice.file_id
    voice = await bot.get_file(file_id)
    path = "./files/voices"

    await handle_file(file=voice, file_name=f"{voice.file_id}.ogg", path=path)
    bot_msg = await message.reply("–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç...")

    rec = KaldiRecognizer(model, 16000)
    rec.SetWords(True)

    process = subprocess.Popen(
        ["ffmpeg.exe",
         "-loglevel", "quiet",
         "-i", f"{path}/{voice.file_id}.ogg",  # –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
         "-ar", "16000",  # —á–∞—Å—Ç–æ—Ç–∞ –≤—ã–±–æ—Ä–∫–∏
         "-ac", "1",  # –∫–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤
         "-f", "s16le",  # –∫–æ–¥–µ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, —É –Ω–∞—Å wav
         "-"  # –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Ç–∫ —á–∏—Ç–∞–µ–º –∏–∑ stdout
         ],
        stdout=subprocess.PIPE
    )

    while True:
        data = process.stdout.read(4000)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            pass

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ str
    result_json = rec.FinalResult()  # —ç—Ç–æ json –≤ –≤–∏–¥–µ str
    result_dict = json.loads(result_json)  # —ç—Ç–æ dict

    print(result_dict["text"])

    if ("–ø–æ–≥–æ–¥–∞" in result_dict["text"] or "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞" in result_dict["text"] or "—Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É" in result_dict["text"] or "—Å–∫–∏–Ω—å –ø–æ–≥–æ–¥—É" in result_dict["text"]):
        if ("–º–æ—Å–∫–≤" in result_dict["text"]):
            city: str = "Moscow"
        elif ("–∫—É—Ä–≥–∞–Ω" in result_dict["text"]):
            city: str = "Kurgan"
        elif ("–∞—Å—Ç–∞–Ω" in result_dict["text"]):
            city: str = "Astana"
        else:
            city: str = "Chelyabinsk"

        print(city)

        if (("—á–µ—Ä–µ–∑" in result_dict["text"] and "–¥–Ω–µ–π" in result_dict["text"]) or ("—á–µ—Ä–µ–∑" in result_dict["text"] and "—á–∞—Å" in result_dict["text"]) or ("—á–µ—Ä–µ–∑" in result_dict["text"] and "–¥–µ–Ω—å" in result_dict["text"]) or ("—á–µ—Ä–µ–∑" in result_dict["text"] and "–¥–Ω—è" in result_dict["text"])):
            start = result_dict["text"].find("—á–µ—Ä–µ–∑")
            if ("–¥–Ω–µ–π" in result_dict["text"]):
                end = result_dict["text"].find("–¥–Ω–µ–π")
                len_mes = len("–¥–Ω–µ–π")
            elif ("–¥–µ–Ω—å" in result_dict["text"]):
                end = result_dict["text"].find("–¥–µ–Ω—å")
                len_mes = len("–¥–µ–Ω—å")
            elif ("–¥–Ω—è" in result_dict["text"]):
                end = result_dict["text"].find("–¥–Ω—è")
                len_mes = len("–¥–Ω—è")
            else:
                end = result_dict["text"].find("—á–∞—Å")
                len_mes = len("—á–∞—Å")

            number = text_to_number(''.join(result_dict["text"][start+len_mes:end].split(' ')[1:-1]))
            if (("–¥–Ω–µ–π" in result_dict["text"]) or ("–¥–µ–Ω—å" in result_dict["text"]) or "–¥–Ω—è" in result_dict["text"]):
                number *= 3600 * 24
            else:
                number *= 3600
        else:
            number = 0

        if ("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in result_dict["text"]):
            number = 3600 * 24 * 2
        elif ("–∑–∞–≤—Ç—Ä–∞" in result_dict["text"]):
            number = 3600 * 24

        print(number)
            
        ts_now = int(time.time()) + number
        url = f"https://vwapi.mxf.su/?lang=ru&city={city}&timestamp={ts_now}"
        await message.answer(text=f"–ü–æ–≥–æ–¥–∞{hlink(" ", url=url)}–≤ {city}", disable_web_page_preview=False)
    if (("—Å–ø–∞—Å–∏–±–æ" in result_dict["text"]) or ("–±–ª–∞–≥–æ–¥–∞—Ä—é" in result_dict["text"]) or ("–±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ" in result_dict["text"]) or ("—Ä–æ–¥–∏–Ω–∞ –≤–∞—Å –Ω–µ –∑–∞–±—É–¥–µ—Ç" in result_dict["text"])):
        excuse_message = ["–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–≤–∞", "–†–∞–¥ –ø–æ–º–æ—á—å", "–ù–µ –∑–∞ —á—Ç–æ", "–ì–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º", "–ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–Ω–µ –¥–æ–ª–∂–µ–Ω –æ–¥–∏–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ü–µ–ª—É–π! üòò", "–í–∞–º —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –º–æ—é –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å —á—É—Ç—å-—á—É—Ç—å –≤–µ—Å–µ–ª–µ–µ! üéâ"]
        await bot_msg.answer(text=f"{excuse_message[randint(0, len(excuse_message)-1)]}")
        return
    return
    

@dp.message(CommandStart())
async def Start_handle(message: Message):
    ts_now = int(time.time())
    url = f"https://vwapi.mxf.su/?lang=ru&city=Chelyabinsk&timestamp={ts_now}"
    await bot.send_message(message.from_user.id, f"–ü–æ–≥–æ–¥–∞{hlink(" ", url=url)}—Å–µ–π—á–∞—Å", disable_web_page_preview=False)

async def main():
    global model
    model = Model("vosk-model-small-ru-0.22")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")